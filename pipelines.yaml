trigger:
  branches:
    include: [ '*' ]
stages:
  - stage: Build
    variables:
      BuildConfiguration: Release
    jobs:
      - job:
        steps:
          - task: DotNetCoreCLI@2
            displayName: Restore
            inputs:
              command: restore
              projects: '**/*.csproj'
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: build
              projects: '**/*.csproj'
              arguments: '-c $(BuildConfiguration)'
          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: test
              nobuild: true
              publishTestResults: true
              projects: '**/*.Tests.csproj'
              arguments: '-c $(BuildConfiguration)'
          - task: DotNetCoreCLI@2
            displayName: Package
            inputs: 
              command: 'pack'
              includesymbols: true
              nobuild: true
              configuration: $(BuildConfiguration)
              outputDir: '$(Build.ArtifactStagingDirectory)'
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Artifact'
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
  - stage: Nightly
    dependsOn: Build
    jobs:
      - deployment:
        environment: Nightly
        strategy: 
          runOnce:
            deploy:
              steps:
                - task: NuGetCommand@2
                  displayName: Push to NuGet Feed
                  inputs:
                    command: 'push'
                    packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
                    nuGetFeedType: 'internal'
                    publishVstsFeed: '6ac051dd-1e9e-4b11-b1e5-4f8aac0f9e27/e7f9c02b-eef7-4070-9ffc-a8a93efdd9f0'
                    allowPackageConflicts: true
  - stage: Public
    dependsOn: Build
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/v'))
    jobs:
      - deployment:
        environment: NuGet.org
        strategy: 
          runOnce:
            deploy:
              steps:
              - task: NuGetCommand@2
                inputs:
                  command: 'push'
                  packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
                  nuGetFeedType: 'external'
                  publishFeedCredentials: 'NuGet.org'
